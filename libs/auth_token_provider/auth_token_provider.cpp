// auth_token_provider.cpp
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.

#include <string.h>

#include "auth_token_provider.h"
#include "sdc600_log.h"

#define ENTITY_NAME "auth_token_provider"

#define ATP_ASSERT_ERROR(_cmd, _exp, _error) \
                do { \
                    int _res = 0; \
                    if (SDC600_TRACE) SDC600_LOG_DEBUG(ENTITY_NAME, "running[%s]\n", #_cmd); \
                    if ((_res = (int)(_cmd)) != _exp) \
                    { \
                        SDC600_LOG_ERR(ENTITY_NAME, "failed to run[%s] res[%d] returning[%s]\n", #_cmd, _res, #_error); \
                        res = _error; \
                        goto bail; \
                    } \
                } while (0)

static uint8_t CERT[] = { 0x6e, 0x65, 0x64, 0x53, 0x00, 0x00, 0x01, 0x00, 0x79, 0x00, 0x00, 0x00,
    0x50, 0x00, 0x00, 0x00, 0xc0, 0x68, 0x9a, 0xdf, 0x7a, 0x7f, 0x80, 0xad, 0xe1, 0xf1, 0x7d, 0xed,
    0xbd, 0x3a, 0x23, 0xc6, 0x80, 0x87, 0x8d, 0x10, 0xf9, 0x99, 0x82, 0x6b, 0xbc, 0xec, 0x41, 0xaa,
    0x94, 0xba, 0xcb, 0xbb, 0x6a, 0x59, 0xb2, 0x34, 0x41, 0x6b, 0x26, 0xf2, 0xb7, 0x5f, 0x96, 0xb0,
    0x59, 0x93, 0xa9, 0x69, 0x8b, 0xac, 0x5c, 0x14, 0xb2, 0x51, 0xa8, 0x45, 0x2c, 0xd4, 0xe2, 0xfc,
    0x37, 0xaf, 0x48, 0x16, 0x9f, 0x7e, 0xad, 0x37, 0x17, 0x0a, 0x2b, 0xc9, 0x2f, 0xf1, 0x5b, 0xdc,
    0x78, 0xcf, 0x80, 0x92, 0xe4, 0xd8, 0x68, 0xb2, 0xc7, 0xd0, 0x4e, 0x9b, 0x66, 0x6e, 0x0a, 0x7a,
    0xf7, 0x53, 0x60, 0x2e, 0x5e, 0xc6, 0x42, 0xa5, 0xdb, 0x94, 0xd1, 0x67, 0xde, 0x1f, 0x5d, 0xe3,
    0x5e, 0x4b, 0x9d, 0xb8, 0x23, 0x3e, 0xdd, 0x79, 0xd8, 0xac, 0xf9, 0xd4, 0xbe, 0x77, 0xf1, 0xae,
    0x8b, 0xbb, 0x94, 0xc7, 0xf8, 0xe8, 0xcc, 0x3a, 0xdb, 0x76, 0x8b, 0xb8, 0x5d, 0x99, 0x83, 0x29,
    0x11, 0xe2, 0xfc, 0x38, 0x0d, 0x65, 0x95, 0x41, 0xbb, 0xd2, 0x8c, 0x77, 0x1b, 0x31, 0xb4, 0xb4,
    0xb9, 0x4a, 0x59, 0x70, 0x72, 0x65, 0xb0, 0x32, 0xb8, 0x34, 0xd0, 0x4e, 0x62, 0x65, 0x9e, 0xfb,
    0x49, 0x76, 0x64, 0x2f, 0x48, 0xe2, 0xe5, 0x00, 0xd7, 0xd1, 0xd4, 0xf4, 0xf6, 0x58, 0xc0, 0x04,
    0x93, 0xee, 0x60, 0xd6, 0x94, 0xcd, 0xc5, 0x01, 0xc5, 0x77, 0xf7, 0xa0, 0xc7, 0xc3, 0x10, 0x5b,
    0xdd, 0x36, 0x1f, 0x37, 0x07, 0xb1, 0x60, 0xef, 0x32, 0x7c, 0x86, 0xc3, 0xd7, 0x2a, 0x19, 0xfd,
    0xac, 0xea, 0x2c, 0x34, 0x40, 0x8d, 0xdf, 0x78, 0x7e, 0xcf, 0xc7, 0xeb, 0x7d, 0x41, 0x25, 0xd3,
    0x0d, 0x14, 0x5a, 0xdf, 0x90, 0xea, 0x8b, 0x68, 0xc3, 0x32, 0xaf, 0x53, 0xcf, 0x11, 0x24, 0x64,
    0xbf, 0xf6, 0xf8, 0xdb, 0x09, 0x4e, 0xae, 0xbb, 0x32, 0x13, 0x9b, 0xc4, 0x90, 0xa7, 0x46, 0xc0,
    0xe3, 0x88, 0xb7, 0x36, 0x78, 0x02, 0xab, 0x67, 0x61, 0x34, 0x17, 0x01, 0xc0, 0xe3, 0xc6, 0x2d,
    0xfb, 0x3e, 0x5d, 0xf8, 0xd8, 0x43, 0x57, 0x4c, 0x84, 0x40, 0x21, 0x97, 0xc5, 0xe4, 0x06, 0x74,
    0x3f, 0xa3, 0x22, 0x35, 0x48, 0x87, 0x33, 0xd8, 0xc5, 0x53, 0x76, 0x98, 0x0d, 0x02, 0x07, 0x48,
    0x15, 0xf5, 0xf6, 0xb8, 0x56, 0x53, 0x08, 0x1c, 0xfe, 0xb4, 0x77, 0x4d, 0x9c, 0xa6, 0x1c, 0x99,
    0xbb, 0x2b, 0x03, 0x03, 0xf3, 0x0c, 0x32, 0x84, 0x0f, 0x96, 0x67, 0x1a, 0x0d, 0x73, 0x13, 0xbc,
    0x0c, 0xe4, 0x34, 0x41, 0x18, 0xb8, 0x09, 0x55, 0x2d, 0xe5, 0x75, 0x47, 0x03, 0xa3, 0xb2, 0xf2,
    0x59, 0x94, 0x81, 0x27, 0x85, 0x98, 0x83, 0x94, 0x81, 0xc4, 0x8d, 0xc8, 0x80, 0xd6, 0xa9, 0xae,
    0x02, 0x44, 0x45, 0x93, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xaa,
    0x4d, 0xe1, 0xc6, 0x58, 0x5c, 0x3d, 0x03, 0x7a, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x2c, 0x43, 0x03, 0x8a, 0x3a, 0x2b, 0x2f, 0xe6,
    0x13, 0x1e, 0x60, 0xbe, 0x18, 0xc7, 0xec, 0x69, 0x05, 0x3d, 0x41, 0x9d, 0xb0, 0x1d, 0x35, 0x7c,
    0x2a, 0xed, 0x9d, 0x5e, 0x65, 0xca, 0x80, 0x37, 0xfb, 0x99, 0x92, 0xba, 0x7a, 0xf2, 0x96, 0xde,
    0x95, 0x12, 0xe1, 0xdb, 0x94, 0x03, 0x3e, 0xdb, 0x58, 0x8f, 0xe7, 0x97, 0xe1, 0xa8, 0x95, 0x4c,
    0x6f, 0xf4, 0xa8, 0xf1, 0x06, 0x77, 0x0a, 0x1a, 0x2e, 0x01, 0xb6, 0x7d, 0x12, 0x89, 0xbf, 0x02,
    0xae, 0x76, 0x3b, 0xaf, 0xdf, 0x80, 0x2c, 0xd3, 0x26, 0xbd, 0x1d, 0x6c, 0xc7, 0x40, 0x3a, 0x59,
    0x1e, 0xc2, 0x16, 0x01, 0x21, 0xf6, 0x90, 0x37, 0xbc, 0xbc, 0xf4, 0xd4, 0x93, 0x3f, 0x1c, 0xff,
    0x93, 0xe2, 0x09, 0x90, 0x66, 0xd3, 0xb9, 0x72, 0x29, 0x61, 0xd1, 0xfc, 0x90, 0x79, 0x30, 0xde,
    0x25, 0x5a, 0x40, 0xcf, 0xb3, 0x37, 0x19, 0x1e, 0x46, 0xc3, 0x9a, 0x74, 0xf2, 0xa2, 0x98, 0xb9,
    0x78, 0xf9, 0xdb, 0x00, 0x9e, 0x51, 0x28, 0xec, 0xef, 0xb2, 0x31, 0xc7, 0xf9, 0x26, 0x50, 0xa1,
    0x5a, 0x7d, 0x44, 0x6f, 0x23, 0x15, 0x9f, 0x8a, 0x58, 0xb6, 0xed, 0xa4, 0xd8, 0x32, 0x5f, 0xc3,
    0x09, 0x65, 0x27, 0x66, 0xf8, 0x96, 0x2f, 0xc1, 0x0b, 0x2d, 0xdb, 0x06, 0x0b, 0x0c, 0xe9, 0xda,
    0xb8, 0x30, 0x41, 0x33, 0xbd, 0x07, 0xb9, 0x27, 0x20, 0x47, 0x65, 0x35, 0x4d, 0x2e, 0x42, 0x94,
    0x4b, 0x1f, 0x91, 0x72, 0x14, 0xac, 0xe1, 0x1f, 0x22, 0xf2, 0x23, 0xf2, 0xdc, 0xfe, 0xd7, 0xe9,
    0x47, 0x1e, 0xa2, 0x59, 0x47, 0xa6, 0x62, 0x86, 0xe4, 0x68, 0xc7, 0xc4, 0xaa, 0xd7, 0xdd, 0x79,
    0x0c, 0x25, 0xf9, 0xca, 0x52, 0x99, 0x3d, 0x95, 0xf3, 0x98, 0x9a, 0xcc, 0xb3, 0x72, 0x92, 0xba,
    0xc6, 0xbc, 0x53, 0x94, 0xbb, 0x96, 0x2e, 0x1d, 0x82, 0x7e, 0x05, 0xe9, 0xee, 0xc3, 0xff, 0xe1,
    0xaa, 0x23, 0x45, 0x20, 0x1b, 0x06, 0x12, 0x02, 0x13, 0x60, 0x13, 0x8d, 0x54, 0xfa, 0x4e, 0x78,
    0x59, 0x26, 0x8a, 0xf6, 0x8a, 0x1f, 0x22, 0xc7, 0x2e, 0xd8, 0x6d, 0xb7, 0xc0, 0xe0, 0xbd, 0xb7,
    0x92, 0x8e, 0x27, 0x0b, 0x91, 0x5b, 0x4e, 0x54, 0xa7, 0xfe, 0x6c, 0x61, 0x32, 0x65, 0x5d, 0xcb,
    0x29, 0x20, 0x47, 0xa2, 0x5c, 0x2f, 0x34, 0xec, 0xf4, 0x9f, 0x12, 0xe4, 0xd2, 0x6b, 0xca, 0x34,
    0xee, 0x67, 0x6b, 0xfb, 0x9b, 0xd5, 0x3b, 0x3e, 0xf2, 0xc3, 0x91, 0x0d, 0x65, 0xd8, 0xa3, 0x37,
    0x24, 0x2d, 0x67, 0xa7, 0x24, 0x7d, 0xe1, 0x70, 0x58, 0x87, 0x73, 0x6e, 0xfc, 0x7b, 0x2e, 0x02,
    0xd4, 0x5d, 0xbc, 0x94, 0xb3, 0x5f, 0xb4, 0xaa, 0xc2, 0x87, 0x52, 0x78, 0xd1, 0xd3, 0x82, 0x49,
    0xb4, 0x80, 0x83, 0x22, 0x75, 0xe6, 0xaf, 0x8f, 0x34, 0xba, 0x22, 0x9f, 0xd2, 0xf3, 0x5d, 0xd5,
    0x9c, 0x8c, 0x3e, 0xeb, 0xde, 0xed, 0xf4, 0x3a, 0xb4, 0x32, 0x04, 0xec, 0x61, 0xda, 0xee, 0xb4,
    0x7c, 0x7b, 0x46, 0xcf, 0x21, 0xd7, 0xfa, 0x8e, 0x65, 0x64, 0x64, 0x53, 0x00, 0x00, 0x01, 0x00,
    0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa6, 0xf1, 0xcd, 0x04, 0xc7, 0x55, 0x5b, 0xa3,
    0xa0, 0x6e, 0xb7, 0x9d, 0xb0, 0x51, 0xef, 0x5b, 0x92, 0xfd, 0x82, 0x3e, 0xe3, 0x96, 0x56, 0xac,
    0x09, 0xde, 0x75, 0x99, 0xa6, 0x5f, 0xc7, 0xd1, 0x6b, 0x95, 0x7a, 0xac, 0x0f, 0xe0, 0xa7, 0xa5,
    0xbd, 0xfc, 0x56, 0x88, 0x01, 0x86, 0xc8, 0x80, 0xea, 0x77, 0xf9, 0xa3, 0x75, 0xd8, 0xc3, 0x72,
    0x19, 0xaa, 0x8a, 0xa3, 0xc9, 0x9b, 0xfa, 0x19, 0xc5, 0xaf, 0x1b, 0x35, 0xaf, 0xad, 0x73, 0x48,
    0xbd, 0x65, 0xa3, 0x42, 0x9f, 0xf9, 0x18, 0x61, 0xde, 0xb0, 0x70, 0x25, 0x21, 0xe6, 0xa3, 0xa1,
    0xc7, 0xd1, 0x6f, 0xfc, 0xc5, 0xb6, 0x9e, 0x63, 0x83, 0xe6, 0xd6, 0x6f, 0x45, 0xa3, 0x70, 0x2a,
    0x9c, 0x77, 0x22, 0xb8, 0x5d, 0x44, 0x5b, 0x93, 0x29, 0x32, 0xeb, 0xbb, 0x53, 0x67, 0x5a, 0xd3,
    0xdb, 0x16, 0x44, 0x8f, 0xab, 0xb6, 0xcc, 0x66, 0x00, 0x0d, 0x6f, 0x4c, 0xa6, 0xbc, 0xbd, 0x6c,
    0x92, 0x5f, 0x1d, 0x14, 0x6f, 0x5d, 0x56, 0xe7, 0xc0, 0xbb, 0xa6, 0x51, 0xe1, 0xe1, 0x24, 0x89,
    0x96, 0x6e, 0xda, 0x7c, 0x12, 0x96, 0xc7, 0x8c, 0xd9, 0xfb, 0x8d, 0x63, 0x87, 0xd0, 0xa4, 0x81,
    0xc6, 0xe4, 0xc3, 0x90, 0x2c, 0x5c, 0xf7, 0xdc, 0x98, 0xec, 0x08, 0xa6, 0xb0, 0x28, 0x18, 0x50,
    0x78, 0x3b, 0x01, 0x95, 0x58, 0x21, 0x20, 0x2d, 0x3d, 0xd0, 0x56, 0xec, 0x7d, 0xdf, 0x7a, 0x5e,
    0xa9, 0xe4, 0xd0, 0xb7, 0xf4, 0xbb, 0x70, 0x48, 0xab, 0xec, 0xec, 0x03, 0x7a, 0x18, 0xcd, 0x1e,
    0xb7, 0x2b, 0xd8, 0xc6, 0xcc, 0x7b, 0x2a, 0x7f, 0xc2, 0x8d, 0x64, 0x07, 0xab, 0x7f, 0x37, 0x69,
    0x9a, 0xa2, 0xf1, 0xcd, 0x85, 0x1a, 0xd4, 0x97, 0x93, 0xa7, 0x6c, 0x59, 0xbf, 0x79, 0x95, 0x57,
    0xf1, 0xde, 0x6e, 0xe3, 0x79, 0x6b, 0xaa, 0x2a, 0x67, 0xaa, 0xf5, 0xc2, 0xb6, 0xda, 0xdc, 0xe8,
    0x62, 0x1b, 0x8d, 0xe1, 0x6f, 0x0e, 0x39, 0x05, 0xd5, 0x3a, 0x17, 0x6f, 0x3d, 0xa3, 0x52, 0x40,
    0x9b, 0xc1, 0x08, 0x74, 0x73, 0xdf, 0xe0, 0x6a, 0x08, 0x22, 0xbe, 0x91, 0x35, 0x83, 0x9c, 0x12,
    0x39, 0x5c, 0x82, 0x1b, 0x7e, 0x34, 0x6b, 0x93, 0x76, 0x6a, 0xad, 0x7b, 0x55, 0x6f, 0xa6, 0xf1,
    0x2b, 0x4e, 0xc0, 0x37, 0x30, 0xcc, 0x6c, 0x3e, 0x34, 0x7c, 0x32, 0xbc, 0xca, 0xb2, 0x22, 0x7b,
    0x1f, 0x18, 0x02, 0x45, 0x07, 0x7f, 0x32, 0xb3, 0x35, 0x87, 0x21, 0xe9, 0x25, 0x1c, 0x45, 0xb3,
    0x7d, 0x27, 0xe5, 0x7e, 0x1c, 0x15, 0x77, 0x07, 0xea, 0x2c, 0x19, 0x07, 0xc8, 0xf0, 0x12, 0x9f,
    0x0b, 0x5a, 0x29, 0x75, 0x02, 0x6b, 0x27, 0x34, 0x9f, 0xda, 0x62, 0xad, 0xbb, 0xac, 0x27, 0x58,
    0xc8, 0xf4, 0x08, 0xaa, 0xa8, 0x7f, 0x9a, 0xa7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0xc4, 0x47, 0xdf, 0xd6, 0x73, 0x87, 0x3e, 0xc0, 0x72, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x6a, 0x63, 0x7a, 0x84,
    0x79, 0xc1, 0xa5, 0x5b, 0xa2, 0x54, 0x2d, 0x66, 0x25, 0xc8, 0x07, 0xc8, 0xd1, 0x9e, 0x4e, 0xcd,
    0xe0, 0x36, 0x3d, 0x20, 0x77, 0xba, 0x04, 0x35, 0xa5, 0x4a, 0xe9, 0x1d, 0xcf, 0x1a, 0xe8, 0xdf,
    0x69, 0xaa, 0x09, 0x64, 0x38, 0x37, 0x51, 0xfe, 0x45, 0x41, 0x8b, 0x15, 0x61, 0x15, 0xac, 0xe6,
    0xe5, 0x4b, 0x1c, 0x70, 0xb1, 0xe8, 0xe0, 0xe8, 0xc6, 0x12, 0xf4, 0x78, 0x4d, 0x3e, 0x4d, 0x59,
    0xd8, 0xdb, 0xd1, 0xc7, 0x30, 0x67, 0x52, 0xd0, 0x06, 0x18, 0x56, 0xd4, 0x0f, 0x7b, 0xd3, 0x96,
    0xbe, 0xd4, 0xef, 0xb7, 0xc5, 0x33, 0xa9, 0x5f, 0x46, 0xbe, 0x2e, 0xe1, 0x3e, 0x4e, 0x95, 0xe6,
    0x24, 0x59, 0x07, 0x46, 0x9f, 0x9d, 0xb8, 0x5d, 0x4e, 0xee, 0x33, 0x6b, 0x8b, 0x46, 0xfc, 0x89,
    0xa9, 0x90, 0x73, 0xae, 0xef, 0x86, 0xf5, 0xfc, 0x5b, 0xac, 0x24, 0x71, 0xe0, 0xfd, 0x67, 0xb0,
    0x7e, 0x16, 0xbc, 0x74, 0xcd, 0x14, 0x6e, 0x20, 0x93, 0x39, 0xd3, 0xae, 0x6c, 0x90, 0xa8, 0x18,
    0xcc, 0x80, 0x69, 0x8a, 0xee, 0x6b, 0x88, 0x67, 0x55, 0xbf, 0x85, 0x0d, 0x1c, 0x3c, 0x0c, 0x82,
    0xc2, 0x62, 0xaf, 0xda, 0xf5, 0x83, 0x26, 0xe3, 0x81, 0xee, 0x84, 0x9b, 0x05, 0x54, 0x47, 0x1b,
    0xf7, 0xcf, 0x6c, 0xb8, 0xc8, 0x49, 0xab, 0x24, 0x1c, 0xb9, 0x4d, 0x45, 0x38, 0x22, 0x60, 0x9b,
    0x74, 0xf9, 0x80, 0x7f, 0x29, 0xb1, 0x25, 0xfc, 0xe0, 0x49, 0x29, 0x07, 0xcd, 0x87, 0xdb, 0x38,
    0x92, 0x7b, 0xb0, 0x2e, 0x77, 0x6e, 0x99, 0x72, 0x8b, 0x4e, 0xd7, 0xd1, 0x6f, 0x6e, 0xcc, 0x23,
    0x0c, 0x9a, 0x0d, 0xcd, 0xb2, 0xb5, 0xeb, 0x42, 0x52, 0x06, 0x13, 0xaf, 0x6e, 0xca, 0x98, 0x57,
    0xbc, 0x3a, 0xde, 0x09, 0x76, 0xac, 0x96, 0xbd, 0xdb, 0xc2, 0x44, 0x7e, 0xbf, 0x8f, 0x18, 0x42,
    0xe8, 0x02, 0x23, 0x96, 0x0a, 0x05, 0x72, 0x3f, 0x72, 0x6f, 0x07, 0x5a, 0xba, 0x6c, 0x7a, 0xa9,
    0x84, 0x5f, 0xb8, 0xfb, 0x24, 0xb9, 0xc9, 0x5f, 0xe3, 0x04, 0x90, 0x6c, 0x71, 0x58, 0xe9, 0xea,
    0x29, 0x0f, 0x2a, 0xe5, 0xba, 0x49, 0x65, 0x99, 0x1d, 0xeb, 0x93, 0xc5, 0x1e, 0x68, 0xc3, 0xdd,
    0x16, 0x65, 0x29, 0xb9, 0xde, 0xb0, 0x6b, 0xb3, 0x80, 0x73, 0x56, 0x58, 0xb4, 0x7a, 0x38, 0x79,
    0x59, 0x84, 0xca, 0x2b, 0x39, 0x1e, 0x22, 0x15, 0xdb, 0xdc, 0x4b, 0xdc, 0x42, 0xf1, 0xa7, 0x92,
    0xb6, 0xdc, 0xef, 0x3b, 0x04, 0x57, 0xdb, 0x75, 0x9e, 0x69, 0x10, 0x1d, 0xf0, 0x49, 0xb5, 0xdb,
    0x09, 0x2b, 0xf3, 0x71, 0xd2, 0x5d, 0x27, 0x93, 0x44, 0x64, 0x98, 0x6c, 0x04, 0x75, 0x2a, 0x68,
    0x44, 0xa8, 0x09, 0x2a, 0xbc, 0x46, 0x71, 0x32, 0x90, 0x0c, 0x50, 0xa6, 0xa0, 0x53, 0x20, 0x17,
    0xf1, 0x84, 0x62, 0x9e, 0x38, 0xcb, 0x2f, 0x26, 0xd2, 0xf7, 0xa4, 0x29, 0x2c, 0x4f, 0xdd, 0x95,
    0xba, 0xe8, 0x7b, 0x89, 0x35, 0xc3, 0xb9, 0xd9, 0x1f, 0x3f, 0x4e, 0x4b};

ATPReturnCode ATP_GenerateSecureDebugCertificate (char* pSocId, size_t socIdLen,
                                         char* pChallenge, size_t challengeLen,
                                         char* pCertificateBuffer, size_t bufferLen, size_t* actualBufferLen,
                                         SDMDebugIf* pDebugIf)
{
    int res = ATP_SUCCESS;

    const size_t CERT_SIZE = sizeof(CERT);

    /* validate pointers */
    ATP_ASSERT_ERROR(pSocId != NULL, true, ATP_FAIL);
    ATP_ASSERT_ERROR(socIdLen != 0, true, ATP_FAIL);
    ATP_ASSERT_ERROR(pChallenge != NULL, true, ATP_FAIL);
    ATP_ASSERT_ERROR(pCertificateBuffer != NULL, true, ATP_FAIL_SHORT_CERT_BUFFER);
    ATP_ASSERT_ERROR(bufferLen > CERT_SIZE, true, ATP_FAIL_SHORT_CERT_BUFFER);
    ATP_ASSERT_ERROR(actualBufferLen != NULL, true, ATP_FAIL);

    SDC600_LOG_DEBUG(ENTITY_NAME, "socIdLen[%zu] challangeLen[%zu] CERT_SIZE[%zu] bufferLen[%zu]\n", socIdLen, challengeLen, CERT_SIZE, bufferLen);

    /* validate sizes */
    memcpy(pCertificateBuffer, CERT, CERT_SIZE);

    *actualBufferLen = CERT_SIZE;

bail:
    return (ATPReturnCode) res;
}
